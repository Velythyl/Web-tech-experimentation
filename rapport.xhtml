<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">
<head>
    <title>Rapport TP2</title>
    <link rel="stylesheet" type="text/css" href="css_rapport.css"/>
</head>
<body>
    <div id="nav">
        <div>Lien vers le club:</div>
        <a href="club.php">club.php</a>
        <div>Sources php (en zip pour que vous puisssiez voir le code):</div>
        <a href="PHP.zip">PHP.zip</a>
        <div>Sources CSS:</div>
        <div style="display: flex; flex-direction: row;">
            <a style="flex: 1" href="css_club.css">css_club.css</a>
            <a style="flex: 1" href="css_rapport.css">css_rapport.css</a>
        </div>
        <div>Source JS:</div>
        <a href="script.js">script.js</a>
        <div>Sources SQL:</div>
        <a href="SQL.zip">SQL.zip</a>
    </div>

    <h3>√âquipe</h3>
    <ul>
        <li>
            Nom: Charlie Gauthier, matricule: 20105623
        </li>
        <li>
            Nom: Maud Moerel-Martini, matricule: 20037754
        </li>
    </ul>

    <p>
        Dans ce document, on note ">" les d√©finitions g√©n√©rales, "‚öΩ" les informations propres √† la page du joueur et
        "üñã" les informations propres √† la page de l'admin. Les √©l√©ments de <span class="sql">cette couleur</span>
        r√©f√©rencent la section sur le SQL √† la fin de ce document.
    </p>

    <p>
        Pour se login: username Tandra441 avec le mot de passe 8ZA1DHDWCO est une Gestionnaire et Joueur. Malissa440 avec le
        mot de passe B78TTOQBKE est Joueur. De plus, pour voir un jour ayant d√©j√† des r√©servations, aller voir 2019-04-16.
        Pour cr√©er un compte, entrer les champs du bas du login et cliquer sur "Create account". Pour se logger dans un compte
        existant, entrer les infos dans les champs du haut et cliquer "Player" si vous voulez vous logger en tant que Joueur et
        "Admin" si vous voulez vous logger en tant qu'admin (le serveur g√®re les permissions).
    </p>

    <h3>Commentaires sur le HTML</h3>

    <p>
        On remarque deux grandes parties du HTML5 du club: le login et la page d'affichage des query ("le query"). √Ä
        l'aide du css, on a plac√© le query au dessus du login. Donc, lorsqu'on ouvre la page initialement, le query est
        par-dessus le login: comme √ßa, lorsqu'on est connect√©s sur notre compte, on ne voit pas la page de login m√™me si
        on a rien eu besoin de faire avec le JS pour cacher cette derni√®re. Autremenent dit, l'√©tat "naturel" de la page
        est celui dans lequel on est connect√©s. Dans l'√©tat contraire, on place le login par-dessus le query, et on a
        qu'√† le remettre en-dessous une fois que c'est fait (voir "state" dans la section "Commentaires sur le code").
        Tout est facilement g√©r√© avec le z-index.
    </p>

    <p>
        Le login comprends deux parties. La partie du haut permet √† un usager de se connecter √† l'aide de son pseudonyme
        et de son mot de passe. Il peut tenter de se logger en tant que Joueur ou en tant qu'Admin, mais le serveur lui
        dira qu'il y a un probl√®me de connexion s'il n'a pas le droit. Il y aura aussi affichage d'une erreur si on
        essaie de cr√©er un compte dont le nom et pr√©nom sont d√©j√†s dans la BD ou si on essaie de se connecter et qu'il y
        a une erreur dans nos identifiants.
    </p>

    <p>
        Lorsqu'on se connecte (peu importe le bouton), le JS nous redirige en appelant club.php avec un GET. Ceci nous
        am√®ne directement au query avec un √©tat "initial": on regarde toutes les heures de demain sur tous les terrains.
    </p>

    <p>
        Cette page de query est presque identique pour l'admin et pour le joueur. Tous deux ont un div (appelons-le
        "terrains") qui affiche les informations sur des terrains en haut de la page, puis un div qui affiche une liste
        juste en bas (ses r√©servations pour le joueur, et les joueurs pour l'admin).
    </p>

    <p>
        Terrains a sensiblement la m√™me apparence pour le joueur et pour l'admin. Voici ses sections:
    </p>

    <dl>
        <dt>Form</dt>
        <dd>
            C'est le moteur de filtres pour la grille √† afficher. On peut choisir la date, tous les terrains ou un en
            particulier et en fonction de l'heure:
        </dd>
        <dd>
            Pour quelle heure (une en particulier ou toutes). De plus, m√™me si le joueur peut seulement faire des
            actions (annuler/r√©server) sur la journ√©e m√™me ou celle de demain, il pourrait appr√©cier de voir
            l'historique des r√©servations sous forme tabulaire. On lui laisse donc choisir la date √† sa guise, mais le
            serveur lui dira quand m√™me une erreur s'il essaie de faire des choses interdites.
        </dd>
        <dd>
            La seule diff√©rence pour l'admin c'est qu'on a renomm√© la s√©lection d'heure √† "From" et qu'on en a
            ajout√© une deuxi√®me appel√©e "To". L'admin peut les utiliser pour s√©lectionner une tranche d'heures de
            "From" √† "To" (si un des deux est mit √† "all", on ignore l'autre et on sort toutes les heures).
        </dd>
        <dt>Grille</dt>
        <dd>
            C'est la grille des disponibilt√©s (et de l'historique si dans le Form on prend une date pass√©e). Elle est
            quasi-identique pour le joueur et pour l'admin. On y a impl√©ment√© une forme de s√©lection: si on hover sur
            une plage horaire on change sa couleur, et si on clique dessus le JS se souvient de l'√©l√©ment s√©lectionn√© (
            voir la section sur le JS dans la section sur le code). De plus, si le texte de l'item est trop grand pour
            sa bo√Æte, on n'a qu'√† placer le curseur sur l'item et il va s'agrandir pour montrer le contenu.
        </dd>
        <dd>
            Les disponibilit√©s sont marqu√©es "Free" et les terrains d√©j√† r√©serv√©s sont marqu√©s "Taken" (et "You" si
            c'est en fait l'usager connect√© en ce moment qui a fait la r√©servation).
        </dd>
        <dd>
            Les disponibilit√©s sont marqu√©es "Free" et les terrains d√©j√† r√©serv√©s sont marqu√©s avec l'information du
            joueur qui a fait la r√©servation.
        </dd>
        <dt>Op√©rations</dt>
        <dd>
            Permet √† l'usager de faire des r√©servations sur les items de la grille. Seulement disponible pour le joueur.
        </dd>
        <dd>
            On retrouve un bouton pour faire une r√©servation ou annuler la r√©servation de la plage horaire s√©lectionn√©e
            (voir l'explication de la grille). Si on fait une op√©ration ill√©gale un div d'erreur avec un message
            appropri√© appara√Ætra sous Op√©rations.
        </dd>
    </dl>

    <p>
        Puis, on a la Liste. Elle affiche toutes les r√©servations faites par le joueur pour le joueur et la liste de
        tous les joueurs pour l'admin. Cette liste est popul√©e automatiquement, d√®s que la page charge: on a en effet
        pas besoin de param√®tres pour les recherches concern√©es, et on peut donc facilement les afficher.
    </p>

    <h3>Commentaires sur le CSS</h3>

    <p>
        Le CSS utilise beaucoup de flexbox et de css-grid. Les grilles et listes sont est effet toutes faites avec
        css-grid pour offrir un interface un peu plus r√©actif √† l'usager. De plus, ceci nous permet de s'assurer que
        tout est bien divis√© en colonnes et en lignes. On peut aussi facilement centrer les items de grilles et de
        flexbox, ce qui est un bonus.
    </p>

    <p>
        Des classes sp√©cifiques ont √©t√© cr√©es pour simplifier le css. On a aussi utilis√© des variables css pour √©viter
        de se m√©langer dans les couleurs et les grosseurs.
    </p>

    <ul>
        <li>
            --border-size est la grosseur standard des bordure de notre page.
        </li>
        <li>
            --accent-color est la couleur d'accent de notre page.
        </li>
        <li>
            --main-color est la couleur principale de ntore page.
        </li>
        <li>
            --half-accent-color est --accent-color avec 50% de transparence
        </li>
        <li>Centered utilise une solution tir√©e de
            <a href="https://css-tricks.com/centering-css-complete-guide/">ce site utile</a> pour centrer.
        </li>
        <li>
            Accent met l'accent sur un √©l√©ment en le colorant avec --accent-color
        </li>
        <li>
            Pretty fait un beau div avec une bordure arrondie de --border-size et de couleur --main-color.
        </li>
        <li>
            Input-submit fait un bel √©l√©ment de input de couleur --accent-color qui change d'apparence lorsqu'on hover.
        </li>
    </ul>

    <h3>Commentaires sur le code</h3>

    <h4>S√©paration POST vs GET</h4>

    <p>
        On utilise GET pour les op√©rations de contenant pas d'informations personelles. Les
        recherches pour la Grille et la Liste sont donc des GET: on a seulement besoin d'envoyer les informations du
        Form par le r√©seau, on traite le ID et les permissions par PHP. Faire et annuler une r√©servation est donc aussi
        des GET: on n'a qu'√† envoyer la date, l'heure et le terrain par le r√©seau, on traite le ID et les permissions
        par PHP.
    </p>

    <p>
        On utilise POST pour les op√©rations confidentielles. Les login et la cr√©ation d'usagers sont donc des POST. La
        demande d'information sur l'√©tat du serveur est aussi un POST puisqu'on re√ßoit une r√©ponse potentiellement
        dangereuse. La demande de logout est aussi un POST pour qu'elle soit dans la m√™me cat√©gorie que les logins et
        que la cr√©ation d'usagers.
    </p>

    <h4>JS</h4>

    <p>
        Bien qu'on ait utilis√© JS ainsi que PHP, on remarque que le PHP fait la vaste, vaste majorit√© du travail. En
        fait, le JS ne fait qu'appeler le PHP dans la grande majorit√© de ses utilisations. On a donc deux parties pour
        le JS: le traitement d'apparence et le traitement de AJAX.
    </p>

    <p>
        Traitement de l'apparence de la page: on a ajout√© des "listener" de click sur les div de la grille et de la
        liste. Lorsqu'on clique, on change la couleur de background de l'√©l√©ment. De plus, si l'√©l√©ment est un √©l√©ment
        de la grille, on sauvegarde le ID de l'√©l√©ment pour pouvoir faire des r√©servations et annulations (voir la
        section de la Grille dans la section sur le PHP). De plus, on traite le z-index du div de login pour l'afficher
        ou le cacher au besoin.
    </p>

    <p>
        Traitement de AJAX: on traite avec AJAX les choses qui pourraient potentiellement √©chouer (donc, les POST (voir
        la section sur les POST ci-haut)). Donc, le login et la cr√©ation d'usager sont trait√©s avec AJAX: on envoie le
        POST, et si la r√©ponse indique un probl√®me, on affiche un message d'erreur sans rafraichir la page. Idem pour
        les r√©servatations et les annulations: on tente de faire l'op√©ration et si elle √©choue on peut utiliser AJAX
        pour afficher une erreur. Dans les deux cas, on rafra√Æchit la page pour r√©fl√©ter les changements d'√©tat du
        serveur. Toutes les requ√™tes dans cette liste se font √† backend.php. Leur traitement se trouve dans la section
        sur backend.php.
    </p>

    <ul>
        <li>
            Login et createUser: si on re√ßoit "FAILURE" on sait que le login a √©chou√© et on affiche un message d'erreur.
            Sinon, on change l'URL du browser du client vers une requ√™te standard pour la Grille.
        </li>
        <li>
            R√©servation et annulation: on fait un POST. Si on re√ßoit "FAILURE", on affiche un message d'erreur. Sinon,
            on fait un "refresh" sur la page pour que l'usager voit que sa requ√™te a √©t√© sauvegard√©e dans la BD. Le PHP
            (voir ci-bas) se charge d'updater la grille.
        </li>
        <li>
            State: On appelle backend.php en lui demandant l'√©tat de la $_SESSION. Si l'usager est connect√©, on ne fait
            pas remonter le div de login (comme d√©crit dans la section HTML).
        </li>
    </ul>

    <h4>PHP</h4>

    <p>
        Le PHP est somme toute assez simple. Dans backend.php on a le traitement des requ√™tes faites avec AJAX alors que
        les requ√™tes faites avec des GET normaux sont trait√©es avec club.php. Cette s√©paration nous permet de pouvoir
        traiter les URL contenant des GET vers club.php simplement, sans aucun traitement de JS: club.php applique
        simplement son traitement de GET et utilise "echo" pour construire la page ad√©quatement. Backend.php s'occupe
        des op√©rations qui peuvent √©chouer. Il serait difficile de traiter cela dans la page principale (club.php)
        puisque "exit()" simplifie beaucoup le traitement de backend.php. Echo serait aussi √©trange si le code de
        backend.php √©tait dans club.php: il faudrait emp√™cher de echo dans le HTML pour pouvoir echo dans le JS (ce qui
        est possible avec un exit() bien plac√©, mais √ßa reste emb√™tant).
    </p>

    <p>
        Les deux fichiers PHP principaux de notre TP utilisent un troisi√®me, "db.php", qui d√©finit nos identifiants pour
        la BD utilis√©e ainsi que les fonctions d'ouverture ou de connection.
    </p>

    <p>
        Traitement des GET non-AJAX en PHP (voir le code PHP aux environs des √©l√©ments expliqu√©s pour des commentaires
        de code): club.php
    </p>

    <dl>
        <dt>
            Form
        </dt>
        <dd>
            On ajoute des valeurs par d√©faut aux √©l√©ments de Form pour qu'ils r√©fl√®tent les informations qui se trouvent
            dans l'URL GET (voir la section Grille ci-bas), pour que l'usager puisse lire ce qui est affich√©
            pr√©sentement dans la Grille (et pour qu'il puisse raffiner sa recherche sans repartir de z√©ro).
        </dd>
        <dd>
            On ne met qu'un input d'heure et on l'appelle "Hour".
        </dd>
        <dd>
            On met deux input d'heures et on les appelles "From" et "To". Si un des deux param√®tres d'heure du GET est
            "all", on met la valeur de d√©faut des deux √† "all".
        </dd>
        <dt>
            Grille
        </dt>
        <dd>
            On commence par traiter l'URL du GET. Voici les valeurs qu'on prend d√©pendemment du GET:

            <ul>
                <li>day: si la date n'√©tait pas "set" dans le GET, on prend la date de demain</li>
                <li>hourLo: si hourHi ou hourLo √©taient "all", hourLo devient 6. Sinon, on prend hourLo b√™tement</li>
                <li>hourHi: si hourHi ou hourLo √©taient "all", hourHi devient 20. Sinon, on prend hourHi b√™tement</li>
                <li>
                    player: ceci n'est pas pris du GET. On prend simplement la valeur du ID dans la $_SESSION si c'est
                    un joueur et "admin" si c'est un admin
                </li>
                <li>
                    field: ceci est pris b√™tement du GET
                </li>
            </ul>

            <p>On construit un header pour la grille (les noms des colonnes) de forme (#T, hourLo .. hourHi)</p>
            <p>
                On appelle <span class="sql">all_on_day(day, hourLo, hourHi, field, player)</span> et on d√©finit une
                variable $grille. Pour chaque $row dans la valeur de retour on ajoute un div contenant $row[2] √† une
                ligne qui commence par le num√©ro du terrain concern√© (de forme (#T,
                [disponibilit√© √† hourLo]..[disponibilit√© √† hourhi])). On ajoute ensuite le tout √† la grille. Noter qu'on
                donne √† chaque plage horaire un ID de forme "#T:DATE:HEURE". Comme √ßa on a les informations (voir la
                section sur l'apparence de la page en JS) pour les op√©arations de r√©servation/annulation dans le JS
                lorsqu'on fait la requ√™te AJAX (voir la section sur AJAX).
            </p>
        </dd>
        <dd>
            Comme mentionn√© plus t√¥t, on affiche "Taken", "You", ou "Free" selon le cas pour la disponibilit√©.
        </dd>
        <dd>
            Comme mentionn√© plus t√¥t, on affiche les informations du joueur ayant fait la r√©servation ou "Free" selon le
            cas pour la disponibilit√©.
        </dd>
        <dt>
            Op√©rations
        </dt>
        <dd>
            Seulement si $_SESSION['as_admin'] est faux: on met des boutons qui appellent les op√©rations sur les
            r√©servations et les annulations. Voir la section sur AJAX pour ces op√©rations.
        </dd>
        <dt>
            Liste
        </dt>
        <dd>
            Les deux listes sont presque identiques. Il y a trois colonnes qui ont chacune un titre. La liste elle-m√™me
            a un titre. On appelle la proc√©dure appropri√©e de notre BD SQL. Pour chaque $row dans le r√©sultat on ajoute
            les √©l√©ments du row dans un div qui fait office de ligne da la liste. Puis, on ajoute le tout au css-grid
            qui fait office de liste.
        </dd>
        <dd>
            La fonction appel√©e est <span class="sql">all_reserves($_SESSION['ID'])</span>.
        </dd>
        <dd>
            La fonction appel√©e est <span class="sql">all_users()</span>.
        </dd>
    </dl>

    <p>
        Traitement des POST et des GET AJAX en PHP (voir le code PHP aux environs des √©l√©ments expliqu√©s pour des
        commentaires de code): backend.php
    </p>

    <ul>
        <li>
            POST:
            <ul>
                <li>
                    Login: on appelle <span class="sql">login(username, password)</span> avec le pseudonyme et mot de passe que
                    l'appel AJAX du JS nous as envoy√©. Si on ne re√ßoit pas le ID de l'usager en retour c'est que quelque chose
                    ne fonctionne pas et on retourne "FAILURE".
                </li>
                <li>
                    Create user: on appelle <span class="sql">create_user(nom, prenom, password, username)</span> avec les
                    arguments re√ßus de l'appel AJAX que le JS a fait. Si on ne re√ßoit pas le ID de l'usager en retour c'est que
                    quelque chose ne fonctionne pas et on retourne "FAILURE".
                </li>
                <li>
                    Pour les deux cas ci-haut, on essaie ensuite d'appeller <span class="sql">is_admin</span> et
                    <span class="sql">is_login</span> avec le ID qu'on a re√ßu. On ne laisse l'usager se login en tant qu'admin
                    qui si la BD nous dit qu'il en est un. On sauvegarde ensuit dans la $_SESSION le ID, et si l'usager est un
                    joueur, un admin, et s'il est connect√© en tant que l'un ou l'autre.
                </li>
                <li>
                    Logout: on d√©truit simplement la $_SESSION.
                </li>
                <li>
                    State: on retourne "none" si il n'y a pas de session.
                </li>
            </ul>
        </li>
        <li>
            GET:
            <ul>
                <li>
                    Reserve: on appelle la proc√©dure
                    <span class="sql">reserve(terrain, jour, heure, id du joueur)</span> de notre BD. On retourne
                    directement la r√©ponse de la BD au AJAX et le JS se chargera du traitement.
                </li>
                <li>
                    Unreserve: on appelle la proc√©dure
                    <span class="sql">unreserve(terrain, jour, heure, id du joueur)</span> de notre BD. On retourne
                    directement la r√©ponse de la BD au AJAX et le JS se chargera du traitement.
                </li>
            </ul>
        </li>
    </ul>

    <h4>SQL</h4>

    <p>Notre mod√®le entit√©-relation est le suivant:</p>
    <ul>
        <li>
            Individu(ID, nom, prenom, mot_de_passe, login) avec ID la cl√© primaire.
        </li>
        <li>
            Joueur(ID) avec ID une cl√© √©trang√®re vers Individu.
        </li>
        <li>
            Gestionnaire(ID) avec ID une cl√© √©trang√®re vers Individu.
        </li>
        <li>
            Terrain(ID) avec ID le num√©ro du terrain et la cl√© primaire.
        </li>
        <li>
            Plages(ID) avec ID l'heure de la plage horaire et la cl√© primaire.
        </li>
        <li>
            Reservation(T_ID, R_date, Heure, J_ID) avec T_ID le num√©ro du terrain et R_date la date de la r√©servation.
            (T_ID, R_date, Heure) est la cl√© primaire, J_ID est une cl√© √©trang√®re vers Joueur et T_ID est une cl√©
            √©trang√®re vers Terrain. Heure est une cl√© √©trang√®re vers Plages.
        </li>
    </ul>

    <p>D'apr√®s ce diagramme:</p>
    <div><img src="diagramme.svg" alt="diagramme sql" height="400"/></div>

    <p>
        Fonctionnement de la BD: on a une table d'individus. La table Joueur est simplement la liste des ID des
        Individus qui sont des joueurs. Idem pour Gestionnaire et les admins. Terrain est la liste des terrains (si dans
        le futur on veut rajouter des terrains il serait facile d'ajouter un ID √† Terrain). Une r√©servation lie un
        Joueur et un Terrain lors d'une certaine date et d'une certaine heure.
    </p>

    <p>
        G√©n√©ration de la BD: on a √©crit un script python qui lit un CSV de "sample data" de personnes trouv√© sur
        internet et qui g√©n√®re des CSV pour les tables d√©crites ci-haut. En appelant le script init.sh, on lance DDL.sql
        qui cr√©e les tables, puis populate.sql qui place les CSV dans les tables (avec un appel √† LOAD DATA INFILE).
    </p>

    <p>
        On a d√©finit des noms de fonctions pour illustrer le comportement de la BD. Ces fonctions n'existent pas
        vraiment: il faut aller voir dans le code SQL l'endroit o√π on dit qu'on les utilise pour voir leur code. On a
        mit des param√®tres, mais c'est seulement √† titre explicatif.
    </p>

    <ul>
        <li>
            login (uname VARCHAR(255), mdp VARCHAR(255)): retourne le ID de l'individu identifi√© par ces param√®tres et
            rien si aucun individu n'a √©t√© trouv√©.
        </li>
        <li>
            create_user(name VARCHAR(255), fname VARCHAR(255), mdp VARCHAR(30), uname VARCHAR(30)): cr√©e l'individu et
            retourne le ID qu'on lui assigne. Si name et fname sont d√©j√† dans la BD, on retourne rien et on ne cr√©e pas
            l'individu.
        </li>
        <li>
            is_admin (ID INTEGER): retourne oui ou non selon l'appartenance de ID √† Gestionnaire
        </li>
        <li>
            is_player (ID INTEGER): retourne oui ou non selon l'appartenance de ID √† Joueur
        </li>
        <li>
            all_on_day(day DATE, hourLo VARCHAR(3), hourHi VARCHAR(3), field VARCHAR(3), player VARCHAR(30)): retourne
            une table de forme (T_ID, Heure, X) pour toutes les heures de hourLo √† hourHi et
            soit tous les terrains si field est "all" ou seulement un si field pour √™tre "cast√©" √† un INTEGER. X est
            "Free" si la plage horaire est libre. Si on est un Joueur, X est "You" ou "Taken" d√©pendemment de si la
            r√©servation nous appartient ou pas. Si on est un admin, X est les informations du joueur √† qui appartient la
            r√©servation.
        </li>
        <li>
            reserve(terrain INTEGER, day DATE, hour INTEGER, player_id INTEGER): fait la r√©servation du terrain lors de
            day √† l'heure hour par le joueur player_id si et seulement si la date est celle de demain, il n'y a pas d√©j√†
            une r√©servation √† cet plage horaire et si le player_id n'as pas une autre r√©servation lors de cette journ√©e.
            Retourne "FAILURE" ou "SUCCESS" selon le cas.
        </li>
        <li>
            unreserve(terrain INTEGER, day DATE, hour INTEGER, player_id INTEGER): annulue la r√©servation du terrain
            lors de day √† l'heure hour par le joueur player_id si et seulement si la date est celle de demain ou
            d'aujourd'hui, la r√©servation appartient √† player_id et l'heure √† laquelle on appelle cette commande n'est
            pas apr√®s l'heure de la r√©servation (si on est le jour m√™me). Retourne "FAILURE" ou "SUCCESS" selon le cas.
        </li>
        <li>
            all_users(): retourne tous les joueurs
        </li>
        <li>
            all_reserves(player_id INTEGER): retourne toutes les r√©servations faites par le joueur player_id
        </li>
    </ul>

</body>
</html>
